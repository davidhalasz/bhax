<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    
    <section>
        <title>Gengszterek</title>
        <para>
            Gengszterek rendezése lambdával a Robotautó Világbajnokságban
            <link xlink:href="https://youtu.be/DL6iQwPx1Yw">https://youtu.be/DL6iQwPx1Yw</link>(8:05-től)
        </para>
        <para>
            Felhasznált irodalom: <citation>BERTALAN</citation>           
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/davidhalasz/bhax/blob/master/attention_raising/Source/2_godel/gengszterek/myshmclient.cpp">https://github.com/davidhalasz/bhax/blob/master/attention_raising/Source/2_godel/gengszterek/myshmclient.cpp</link>                 
        </para>
    
        <para>
            Ebben a feladatban a Robotautó Világbajnokság forráskódjában szereplő lambda kifejezések használatával történő std::sort-al kapcsolatban lesz szó. 
            A lambda függvények segítségével akár többsoros névtelen függvényeket definiálhatunk, ott ahol hasznát vennénk. Általános alakja: <![CDATA[ [] {} () ]]> 
            Ahol a szögletes zárójel jelzi, hogy lambda kifejetés következik, a kapcsos zárójelbe kerül a függvény törzse, a kerek zárójel pedig függvényhívást jelenti. 
            A lambda szerkezete nem kötött, ha valamelyik része hiányzik, akkor azt a fordító feltételezés alapján automatikusan kitölti. Most vizsgáljuk meg a forráskódban szereplő 
            kódcsipetet:
        </para>
        <programlisting language="c++"><![CDATA[ 
std::sort ( gangsters.begin(), gangsters.end(), [this, cop] ( Gangster x, Gangster y ) 
{
    return dst ( cop, x.to ) < dst ( cop, y.to );
} );
            ]]>
        </programlisting>
        <para>
            A fenti lambda függvény csak az std::vector beépítése után működőképes. Az std::sort segítségével történik a sorbarendezés, melynek paraméterként adjuk meg a lambda függvényt. 
            A <function>.begin()</function> és a <function>.end()</function> függvények alkalmazásával mondjuk meg, hogy mettől meddig szeretnénk számításba venni a sorbarendezést. Mi most a 
            <function>gangsters</function> vektort használjuk erre, azaz a vektor első és utolsó indexét adjuk meg. Ezután jön a szögletes zárójel, amiben két változó van: a <function>this</function> 
            segítségével érhetjük el az osztály tagjait, és a <function>cop</function> objetumára lenne szükségünk. Az <function>std::sort() {}</function> kapcsos zárójelében annak visszatérési értékét 
            kapjuk meg, hogy melyik gangster van közelebb a rendőrhöz. 
        </para>
    </section>

    <section>
        <title>C++11 Custom Allocator</title>
        <para>
            <link xlink:href="https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/">https://prezi.com/jvvbytkwgsxj/high-level-programming-languages-2-c11-allocators/</link> a
            CustomAlloc-os példa, lásd C forrást az UDPROG repóban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/davidhalasz/bhax/tree/master/attention_raising/Source/2_godel/customalloc">https://github.com/davidhalasz/bhax/tree/master/attention_raising/Source/2_godel/customalloc</link>                 
        </para>
        <para>
            A C++ programok írása során előfordulhatnak olyan különleges esetek, amikor szükségünk van saját allokátor létrehozására az alapértelmezett helyfoglalás helyett, így ebben a feladatban 
            most egy ilyen saját allokátor elkészítését mutatom be. Először nézzük meg, mik a legfontosabb allokátor tagfüggvények:
        </para>
        <itemizedlist mark='opencircle'>
            <listitem>
                <para>allocator(), allocator(const allocator<![CDATA[&]]> a) és ~allocator: konstruktorok és destruktor </para>
            </listitem>
            <listitem>
                <para>pointer address(reference r) cons: r címével tér vissza</para>
            </listitem>
            <listitem>
                <para>pointer allocate(size_type n): tárfoglalás n darab objektum számára</para>
            </listitem>
            <listitem>
                <para>void deallocate(pointer p, size_type n): a lefoglalt memória felszabadítása</para>
            </listitem>
            <listitem>
                <para>size_type max_size() const: a difference_type legnagyobb értékével tér vissza</para>
            </listitem>
        </itemizedlist>
        <para>
            Most pedig lássuk a customalloc.h fájlt: 
        </para>
        <programlisting language="c++"><![CDATA[ 
template<typename T>
class CustomAlloc
{
public:
    CustomAlloc() {}
    CustomAlloc(const CustomAlloc&) {}
    ~CustomAlloc() {}

    using size_type = size_t;
    using value_type = T;
    using pointer = T*;
    using const_pointer = const T*;
    using reference = T&;
    using const_reference = const T&;
    using difference_tyoe = ptrdiff_t;

    pointer allocate( size_type n){
        int s;
        char* p = abi::__cxa_demangle( typeid (T).name(), 0, 0, &s);
        std::cout << "Allocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;
        delete p;
        return reinterpret_cast<T*>(new char[n*sizeof(T)]);
    }

    void deallocate (pointer p, size_type n){
        delete[] reinterpret_cast<char *>(p);
        std::cout << "Deallocating "
                  << n << " objects of "
                  << n*sizeof (T)
                  << " bytes. "
                  << typeid (T).name() << "=" << p
                  << std::endl;

    }
};
            ]]>
        </programlisting>
        <para>
            Ahogy láthajuk, a CustomAlloc osztályunk az allokátor kunstruktoraival és destruktorral kezdődik. Az <function>using</function> kulcsszó használatával pedig 
            alias-okat hozhatunk létre, azaz az egyenlőségjel után állókat használjuk majd később a programuk írása során. 
            A memóriafoglalás a <function>pointer allocate()</function> metódus segítségével történik, ahol megadott 
            számú (n) elemet foglal le és visszatért a blokk címével. A <function>abi::__cxa_demangle()</function> használatával függvények, típusok és változók neveiből 
            egyedi kódnevet állít elő a linkerek számára. Végül kiíratjuk az adatokat.
        </para>
        <programlisting language="c++"><![CDATA[ 
int main()
{
    std::vector<int, CustomAlloc<int>> v;

    v.push_back(1);
    v.push_back(2);
    v.push_back(3);
    v.push_back(4);
    v.push_back(5);
    v.push_back(6);
    v.push_back(7);
    v.push_back(8);
    v.push_back(9);
    v.push_back(10);
    v.push_back(11);
    v.push_back(12);
    v.push_back(13);
    v.push_back(14);
    v.push_back(15);

    for(int x : v){
        std::cout << x << std::endl;
    }

    return 0;
}
            ]]>
        </programlisting>
        <para>
            A fenti kódcsipet a main.cpp file-ban található. Szerepe, hogy egy vektort hozunk létre és ide fogjuk berakni 
            az allokátorunk által előállított elemeket, és ezeket íratjuk ki.
        </para>
        <figure>
            <title>Allokátor eredménye</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/java/allocate.png" width="100%" format="PNG"/>
                </imageobject>
            </mediaobject>   
        </figure>
        <para>
            A fenti képen az figyelhető meg a fordítás és futtatás után, hogy az allocating utáni szám minden egyes alkalommal 
            megkétszereződik, majd felszabadítja az előző memóriát. Azaz az új memóriára rámásolja az előzőt az újjal együtt és így tovább.
        </para>
    </section>

    <section>
        <title>STL map érték szerinti rendezése</title>
        <para>
                Például: <link xlink:href="https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180">https://github.com/nbatfai/future/blob/master/cs/F9F2/fenykard.cpp#L180</link>
        </para>
        
        <para>
                Megoldás forrása: <link xlink:href="https://github.com/davidhalasz/bhax/blob/master/attention_raising/Source/2_godel/map/fenykard.cpp">https://github.com/davidhalasz/bhax/blob/master/attention_raising/Source/2_godel/map/fenykard.cpp</link>                 
        </para>
        
        <para>
            Az STL a C++ nyelv Szabványos Sablonkönyvtára (Standard Template Library). Elterjedt adatstruktúrákat és algoritmusokat építhetünk be a programunkba. 3 csoportra osztható: 
            konténerekre, alogritmusokra és iterátorokra. A <function>map</function> konténerekben adatpárok tárolódnak, ahol az első tag a kulcs, a második pedig az adat. Az alábbi 
            kódcsipet a fenykard.cpp programból van és ezt fogjuk most megvizsgálni:    
        </para>

        <programlisting language="c++"><![CDATA[ 
std::vector<std::pair<std::string, int>> sort_map ( std::map <std::string, int> &rank )
{
        std::vector<std::pair<std::string, int>> ordered;

        for ( auto & i : rank ) {
                if ( i.second ) {
                        std::pair<std::string, int> p {i.first, i.second};
                        ordered.push_back ( p );
                }
        }

        std::sort (
                std::begin ( ordered ), std::end ( ordered ),
        [ = ] ( auto && p1, auto && p2 ) {
                return p1.second > p2.second;
        }
        );

        return ordered;
}
            ]]>
        </programlisting>
        <para>
            Itt az látható, hogy a sort_map két paramétert vár: egy string és egy integer típusút. Ebből fogunk csinálni egy vektort, mégpedig úgy, hogy a két paramétert 
            összepárosítjuk az <function>std::pair</function> függvénnyel, majd ezek összességét elnevezzük <function>ordered</function>-nek. A <function>pair</function> 
            lehetővé teszi, hogy egyetlen objektumban két különböző objektumot tároljunk, amelyek közül az elsőre a first, míg a másodikra a second névvel hivatkozhatunk. 
            Továbbá mivel map konténerről van szó, ezért az asszociatív tömb elemeiben a kulcsoknak egyedinek kell lennie. A <function>push_back</function> segítségével tesszük bele 
            a kulcs/érték párokat az ordered vektorba. Ekkor jön a már megismert sorbarendezés. A szögletes zárójelben lévő egyenlőségjel segítségével az összes helyi változót érték szerint fogjuk elkapni és 
            ez alapján rendezzük majd a vektort.
            A zárójelben lévő <function>auto</function> kulcsszóval pedig automatikusan fog megtörténni a típus-meghatározás. 
        </para>
    </section>

    <section>
        <title>
            Alternatív Tabella rendezése
        </title>
        <para>
            Mutassuk be a <link xlink:href="https://progpater.blog.hu/2011/03/11/alternativ_tabella">https://progpater.blog.hu/2011/03/11/alternativ_tabella</link> a programban a java.lang
            Interface Comparable<![CDATA[ <T> ]]> szerepét!
        </para>
        
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/davidhalasz/bhax/tree/master/attention_raising/Source/2_godel/alternativ%20tabella">https://github.com/davidhalasz/bhax/tree/master/attention_raising/Source/2_godel/alternativ%20tabella</link>                 
        </para>
            
        <para>
            Ebben a feladatban a <function>Comparable</function> interfész működéséről lesz szó. Ezzel az interfésszel teljes rendezést 
            tudunk definiálni az azt megvalósító osztályok egyedein. Egy metódusa van, mégpedig a <function>compareTo</function>, amivel két metódust tudunk összehasonlítani. 
            Ha a a paraméterben adott objektum nagyobb, mint az objektum, amelynek meghívtuk a compareTo metódusát, 
            akkor negatív értéket, ha viszont a paraméterben kapott objektum a kisebb, akkor pozitív lesz az értéke. Egyenlő értékeke esetén pedig 
            nullát ad értékül. A mi esetünkben a Csapat osztály implementálja a Comparable interfészt az <filename>AlternativTabella.java</filename> programunkban:
        </para>
        <programlisting language="c++"><![CDATA[ 
class Csapat implements Comparable<Csapat> {

  protected String nev;
  protected double ertek;

  public Csapat(String nev, double ertek) {
    this.nev = nev;
    this.ertek = ertek;
  }

  public int compareTo(Csapat csapat) {
    if (this.ertek < csapat.ertek) {
      return -1;
    } else if (this.ertek > csapat.ertek) {
      return 1;
    } else {
      return 0;
    }
  }
}
            ]]>
        </programlisting>
        <para>
            A <filename>Wiki2Matrix.java</filename> fájlban tároljuk el kétdimenziós tömbben (<function>kereszt</function>) a
             labdarúgó bajnokság eredményeit. Ebből lesznek majd kiszámolva egy linkmátrix az compare interfészet tartalmazó 
             <function>AlternativTabella</function> programunkhoz. Itt kell bettennünk az AlternativTabella osztályban lévő 
             double[][] L = {}; kapcsos zárójelek közé.
        </para>
    </section>
            
</chapter>