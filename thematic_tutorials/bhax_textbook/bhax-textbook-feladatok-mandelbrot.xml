<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            A mandelbrot-halmaz    
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Source/mandelbrot/mandelpngt.c++">https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Source/mandelbrot/mandelpngt.c++</link>
        </para>
        <para>
            A forrásban megfigyelhető, hogy az eddigiekhez képest két új könyvtárat is használunk a headrünkben. Az egyik a <function>#include "png++/png.hpp"</function>, amivel png kép készíthető el, a másik könyvtár pedig a <function>#include &lt; sys/times.h &gt;</function>, amivel mérhetjük az időt, jelen
            esetben azt, hogy meddig tart a amíg a program elkészíti a képet. Ez utóbbit kihagyhatjuk, ez csak akkor érdekes, ha meg szeretnénk vizsgálni, hogy
            mennyi idő alatt készíti el a képet a processzor és mennyi ideig a videókártya.
        </para>
        <para>
            A main függvény 2 argumentumot tartalmaz, amit az if függvénnyel ellenőrízünk le, azaz, ha a terminálban megadott paraméterek száma nem egyenlő a kettővel, 
            akkor kiíratjuk a kép elkészítéséhez szükséges parancssor használat módját és egy hibaüzenetet. Az első paraméternek a program nevének, a másodiknak
            pedig az elmenteni kívánt png típusú fájl nevének kell lennie. 
        </para>
        <programlisting  language="c++"><![CDATA[
int
main (int argc, char *argv[])
{
    // Mérünk időt (PP 64)
    clock_t delta = clock ();
    // Mérünk időt (PP 66)
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);

    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;
    }

            }]]>
        </programlisting>
        <para>
            Következő lépésként dekraláljuk a kép számításához szükséges adatokat (a, b, c, d, szelesseg és magassag). Amit a következő négy sorban használjuk fel.
            A <function>png::image &lt; png::rgb_pixel &gt; kep (szelesseg, magassag);</function> kódsorral létrehozunk egy 600x600 pixel méretű üres képet, továbbá
            dekraláljuk a dx és a dy változókat, melyek értékei az x és y tengely lépésközeit adja meg.
        </para>
        <programlisting  language="c++"><![CDATA[
double a = -2.0, b = .7, c = -1.35, d = 1.35;
int szelesseg = 600, magassag = 600, iteraciosHatar = 32000;

    
png::image < png::rgb_pixel > kep (szelesseg, magassag);

double dx = (b - a) / szelesseg;
double dy = (d - c) / magassag;
double reC, imC, reZ, imZ, ujreZ, ujimZ;

            }]]>
        </programlisting>
        <para>
            Ezt követően két for ciklussal zongorázzuk végig az adatokat, melyek addig tartanak, amennyi a szélesség és a magasság mérete.
            Miközben egyenként végigmegyünk a komplex síkon, a while ciklussal ellenőrízzük, hogy a a <function>reZ</function> és a <function>imZ</function>
            négyzeteinek összege kisebb-e, mint 4 ÉS hogy az iteráció nem éri-e el az iterációs határt. Ha a feltétel teljesül, akkor az adottrácspont nem lesz
             a Mandelbrot-halmaz eleme és számítással új értékeket
            rendelünk a reZ és az imZ változókhoz. Ettől a while ciklustól függ a pixelek kiíratása, azaz, ha a feltétel teljesül, akkor nem lesz pixel, 
            ellenkező esetben előhívjuk a <function> kep.set_pixel() </function> függvényt a fekete képpont rajzolásához, ahol a k lesz a sor, a j pedig az oszlop.
        </para>
        <programlisting language="c++"><![CDATA[
for (int j = 0; j < magassag; ++j)
    {
        for (int k = 0; k < szelesseg; ++k)
        {
            reC = a + k * dx;
            imC = d - j * dy;
            reZ = 0;
            imZ = 0;
            iteracio = 0;

            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;
            }

            kep.set_pixel (k, j,
                png::rgb_pixel (255 -
                (255 * iteracio) / iteraciosHatar,
                255 -
                (255 * iteracio) / iteraciosHatar,
                255 -
                (255 * iteracio) / iteraciosHatar));
        }
        std::cout << "." << std::flush;
    }
      }]]>
        </programlisting>
        <para>
           A fenti képet végül lementjük  abba a fájlba, amit még a program elindítása során adtuk meg és kiíratjuk, hogy a kép mentése elkészült.
           Továbbá a kép elkészítésének idejét is kiíratjuk, amihez előbb számításokat kell végeznünk.
        </para>
        <programlisting language="c++"><![CDATA[
kep.write (argv[1]);
std::cout << argv[1] << " mentve" << std::endl;

times (&tmsbuf2);
std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

delta = clock () - delta;
std::cout << (double) delta / CLOCKS_PER_SEC << " sec" << std::endl;
      }]]>
        </programlisting>
        <para>
            A program elindítása és a végeredmény az alábbi két képen látható:
        </para>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/mandelterm.png" width="100%" format="PNG"/>
              </imageobject>
        </mediaobject>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/mandel.png" width="80%" format="PNG"/>
              </imageobject>
        </mediaobject>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása: <link xlink:href="hhttps://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Source/mandelbrot/3.1.2.cpp">https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Source/mandelbrot/3.1.2.cpp</link>
        </para>
        <para>
            Az std::complex standard könyvtár segítségével a komplex számokat (azaz a valós és imaginárius egységeket) a complex() függvénnyel egy helyen kezelhetjük,
            anélkül, hogy további változókat hoznánk létre. Most az előző Mandelbrot programot készítjük el a complex könyvtár használatával. Az időmérést ebből a programból most kihagyjuk. 

        </para>
        <para>
            A headerbe beillesztjük a &lt;complex&gt; könyvtárat.A main függvényen belül megadjuk a szélességet és a hosszúságot is, jelen esetben most egy 
            fullhd értékeivel megegyező méretet adtunk meg. Az if() függvényben megvizsgáljuk, hogy a program elindításához szükséges parancssor paramétereinek
            száma egyenlő-e 9-cel, ha ige, akkor a változókhoz értékeket rendelünk hozzá. Az atoi() függvény azt csinálja, hogy a bevitt adatot integer típusú 
            értékké alakítja, míg az atof() függvény pedig double lesz. Ellenkező esetben, ha a feltétel nem teljesül, akkor kiíratjük a program helyes 
            elindításához szükséges módot, továbbá egy hibaüzenetet.
        </para>
        <programlisting language="c++"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }
      }]]>
        </programlisting>
        <para>
            További különbség az előző programunkhoz képest, hogy a második for cikluson belül használjuk az std::complex osztályt. Jellemzője,
            hogy double típusú paraméterek lesznek és két részből áll: egy valós (<function>reC</function>) és egy imaginárius (<function>imC</function>)
             egységből. Ez lesz a c változó. Ugyanígy adjuk meg a z_n változót is, csak itt nullákat adunk meg, amik majd a while ciklusban fog
             változni, ha z_n értéke kisebb mint 4 és az iteráció kisebb mint az iterációs határ. Ha azadott érték eleme a Mandelbrot-Halmaznak, akkor pixeleket rajzolunk, továbbá kiíratjuk, hogy hány százaléknál jár a kép feldolgozása, majd az előző programból ismert módon mentünk.           
        </para>
        <programlisting language="c++"><![CDATA[
png::image < png::rgb_pixel > kep ( szelesseg, magassag );

double dx = ( b - a ) / szelesseg;
double dy = ( d - c ) / magassag;
double reC, imC, reZ, imZ;
int iteracio = 0;

std::cout << "Szamitas\n";

  for ( int j = 0; j < magassag; ++j )
    {
      for ( int k = 0; k < szelesseg; ++k )
        {
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
            png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }
  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;
}
      }]]>
        </programlisting>
        <para>
            A program elindítása után egy nem egy fekete-fehér képet, hanem sokkal színesebb eredményt kapunk:        
        </para>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/mandelterm2.png" width="100%" format="PNG"/>
              </imageobject>
        </mediaobject>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/mandel2.png" width="80%" format="PNG"/>
              </imageobject>
        </mediaobject>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Biomorf/3.1.3.cpp">https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/Biomorf/3.1.3.cpp</link>
        </para>
        <para>
           Vmi a Julia halmazról
           Az előző feladathoz képest az a különbség, hogy itt 9 helyett 12 paramétert kell megadni a program elindítása során.
            Ugyanis itt a valós és az imaginárius egységek továbbá az R is állandó érték lesz.
        </para>
        <programlisting language="c++"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.3 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";
          }]]>
    </programlisting>
    <para>
        A másik lényeges különbség a for ciklusban figyelhető meg. Itt nincs while ciklus, helyette for-t használunk. Az első két ciklussal végigmnegyünk a rácsokon,
        a harmadik pedig addig fog futni, amíg el nem éri az iterációs határt. Az utóbbin belül a z_n értéke az aktuális z_n változó értékének 3. hatványa lesz,
        amit a <function>std::pow()</function> osztállyal számítjuk ki, majd ezt az értéket vizsgáljuk meg egy if() függvénnyel. Az std::real() és azt std::imag() értelemszerűen azt jelenti, hogy az adott z_n változó valós és imaginárius értékét vegye figyelembe. Tehát ha a valós szám vagy az imaginárius szám értéke
        nagyobb, mint R akkor a feltétel teljesül és az iteracio értéke az adott i változó értékével lesz megegyező. Ezután elkészítjuk a Julua-Halmazos képet.
    </para> 
    <programlisting language="c++"><![CDATA[
for ( int y = 0; y < magassag; ++y )
{
    for ( int x = 0; x < szelesseg; ++x )
    {
        double reZ = xmin + x * dx;
        double imZ = ymax - y * dy;
        std::complex<double> z_n ( reZ, imZ );

        int iteracio = 0;
        for (int i=0; i < iteraciosHatar; ++i)
        {
            z_n = std::pow(z_n, 3) + cc;
            if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
            {
                iteracio = i;
                break;
            }
        }
            kep.set_pixel ( x, y,
                png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
    }

    int szazalek = ( double ) y / ( double ) magassag * 100.0;
    std::cout << "\r" << szazalek << "%" << std::flush;
}
          }]]>
    </programlisting>
    <para>
        Ezután elkészítjuk a Julua-Halmazos képet:
    </para>
    <mediaobject>
              <imageobject>
                <imagedata fileref="img/bmorf.png" width="60%" format="PNG"/>
              </imageobject>
        </mediaobject>          
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása !!</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/CUDA/mandelpngc_60x60_100.cu">https://gitlab.com/davidhalasz/bhax/blob/master/attention_raising/CUDA/mandelpngc_60x60_100.cu</link>
        </para>
        <para>
            A CUDA az NVIDIA által fejlesztett programozási környezet, amely az NVIDIA grafikus processzorainak párhuzamos programozására használható.
            Legfontosabb célja, hogy az adott feladatokat a lehető legrövidebb idő alatt oldja meg. Amíg a CPU-k csak néhány szálat tudnak egymástól függetlenül
             futtatni, addig a GPU-k sokkal nagyobb számú feladatokat is képesek elvégezni, és a CUDA ezt az előnyt használja ki, nem csak képalkotási 
             feladatoknál, hanem akár általános célú programok megvalósítása során is felhasználhatjuk.
        </para>
        <para>
            Jelen példánkban a <function>.cu</function> fájltípusú programot fogjuk használni. Ehhez előzetesen szükségünk lesz az NVIDIA cuda toolkit 
            programot telepítenünk, hogy tudjuk használni az <function>nvcc</function> parancsot a program fordítása során. A programunk az első feladatban
            megismert alkalmazás továbbfejlesztése.
            A legszembetűnőbb változtatás a programunk elején láhtatóak, amelyek mindig valamilyen függvény minősítőkkel kezdődnek. Ilyen függvény minősítők
             lehetnek például: <function>__global__</function>, <function>__device__</function> <function>__host__ </function> és a <function>__noinline__, __forceinline__ </function>.
            Jelen esetünkben van egy <function>__device__</function> függvényünk. Ez a GPU-n futó függvény kódja, ami csak a GPU kódból hívható. Ide rakjuk be az első feladatból
            megismert változókkal, számításokkal és a rács csomópontjaival kapcsolatos kódcsipetet. A magassag és a meret most 600x600 pixel lesz.
        </para>
            <programlisting language="c++"><![CDATA[
__device__ int
mandel (int k, int j)
{
  
  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;

  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}
          }]]>
    </programlisting>
        <para>
        Továbbá van még két <function>__global__</function> függvényminősítőnk, és mindkettő a mandelkernel() függvényhez kapcsolódik. 
        Ez egy kernel függvény lesz, ami azt jelenti, hogy a GPU-n futó kódból, azaz a gazda kódból hívható. A <function>blockIdx</function>
        a CUDA saját beépített változója, ami uint3 típusú, a futó blokk számát adja meg. A <function>threadIdx</function> is egy uint3 típusú
        változó, csak ez a futó szál számát fogja megadni. 
    </para>
    <programlisting language="c++"><![CDATA[
/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}
          }]]>
    </programlisting>
    <para>
         Ez a cudamandel() függvény két paramétert vár: integer típusú kepadat tömb értékeit, ami értéke most egyenként 600 lesz.
         A cudaMalloc működése hasonló a C++ malloc() függvényéhez, amit szintén memóriafoglaláshoz használunk.
         A dim3 típusú grid blokk mérete 60x60 lesz, mivel a méretet elosztjuk 10-el és blokkonként 100 szállal fog dolgozni, ezt a tgrid() függvénnyel adtuk meg. 
    </para>
    <programlisting language="c++"><![CDATA[
void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
          MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}
          }]]>
    </programlisting>
    <para>
        A programunk main() részét nem tartom szükségesnek bemutatni, ugyanis ha megvizsgáljuk, akkor nem találunk semmi újdonságot az eddigi programunkhoz képest. Van benne egy cudamandel() függvény, ami megfogja kapni a fenti adatokat, így fogjuk elkészíteni a képet.
    </para>
    <programlisting language="c++"><![CDATA[
int
main (int argc, char *argv[])
{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
    {
      kep.set_pixel (k, j,
             png::rgb_pixel (255 -
                     (255 * kepadat[j][k]) / ITER_HAT,
                     255 -
                     (255 * kepadat[j][k]) / ITER_HAT,
                     255 -
                     (255 * kepadat[j][k]) / ITER_HAT));
    }
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

          }]]>
    </programlisting>
    


    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/davidhalasz/bhax/tree/master/attention_raising/Source/mandelbrot/nagyitas">https://gitlab.com/davidhalasz/bhax/tree/master/attention_raising/Source/mandelbrot/nagyitas</link>
        </para>

        <para>
           Tutorial: Fürjes-Benke Péter
        </para>
        <para>
             Mielőtt elkezdenénk a programot, először szükséges telepíteni a libqt4-dev csomagot, mert enélkül nem fog elindulni a program.
             A mappában egy helyen kell szerepelnie az alábbi négy fájlnak, ami a képen is látható, miután elindítottam az ls -l parancsot.
             Továbbá a <function>qmake -project</function> létrehoz egy .pro végződésű fájlt, a fájl neve megegyezik az aktuális mappa nevével.
             Miután ez megtörtént, ezt a .pro végződésű fájl-ba bele kell másolni ezt a sort: <function>QT += widgets</function>. Ezután lehet a parancssorba
             beírni, hogy <function>qmake *.pro</function>
        </para>
         <mediaobject>
              <imageobject>
                <imagedata fileref="img/zoom.png" width="70%" format="PNG"/>
              </imageobject>
        </mediaobject>
        <para>
            Ez a parancs létrehozza a Makefile-t, amit a make parancs használatával egy bináris fájlt hozunk létre, aminek a neve megegyezik az aktuális mappánk nevével.
            Ezt kell elindítanunk, ugyanúgy ahogy bármely más programot szoktunk. Haminden jól megy akkor az alábbi Mandelbrot-halmazt kell kapnunk:
        </para>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/zoom1.png" width="60%" format="PNG"/>
              </imageobject>
        </mediaobject>
        <para>
            Nagyítani úgy tuunk, hogy az egérrel kijelülönk egy részt, majd a program automatikusan oda zoomol. Ha a kép életlennek tűnik, akkor meg kell nyomnunk
            az "n" billentyűt, ugyanis ilyenkor a program számítást végez és élesíti a képet.
        </para>
        <mediaobject>
              <imageobject>
                <imagedata fileref="img/zoom2.png" width="60%" format="PNG"/>
              </imageobject>
              <textobject>
                <phrase>Nagyítás után</phrase>
              </textobject>
        </mediaobject>  
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven !!</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/davidhalasz/bhax/tree/master/attention_raising/Source/mandelbrot/java">https://gitlab.com/davidhalasz/bhax/tree/master/attention_raising/Source/mandelbrot/java</link>
        </para>
        <para>
            Ebben a feladatban a az előzőt csináljuk meg ugyanazt, csak java-ban. A fordítás a <function>javac</function> parancssal történik, és a program elindításához pedig a <function>java</function>-t használjuk. Ezt az alábbi kódsor szemlélteti:
        </para>
        <screen>
            javac MandelbrotHalmazNagyító.java
            java MandelbrotHalmazNagyító
        </screen>
        <para>
         A nagyítást végző kódsorokat <function>MandelbrotHalmazNagyító.java</function> programon belül a MandelbrotHalmazNagyító osztályban hozzuk létre.
         A MouseAdapter implementálja a Mouselistenert. A MousePressed osztály a MouseEvent paramétereit várja, ami akkor lép működésbe, ha egy pontra történik az egér klikkelés.
         Ilyenkor az osztályon belül lekéri a nagyítandó kijelölt rerület bal felső sarkának helyét.
         Alaphelyzetben a szélesség (mx) és a magasság (my) értékei 0, ami megváltozik ha az egérrel kijelülönk egy területet.
        </para>
        <programlisting language="java"><![CDATA[
// Egér kattintó események feldolgozása:
addMouseListener(new java.awt.event.MouseAdapter() {
    // Egér kattintással jelöljük ki a nagyítandó területet
    // bal felső sarkát:
    public void mousePressed(java.awt.event.MouseEvent m) {
        // A nagyítandó kijelölt területet bal felső sarka:
        x = m.getX();
        y = m.getY();
        mx = 0;
        my = 0;
        repaint();
    }
        }]]>
        </programlisting>
        <para>
          Ha kijelöltünk egy területet, akkor a MouseReleased() osztály elvégez egy számítást, és egy új 
          nagyító objektumot hoz létre.  
        </para>
        <programlisting language="java"><![CDATA[
public void mouseReleased(java.awt.event.MouseEvent m) {
    double dx = (MandelbrotHalmazNagyító.this.b
                - MandelbrotHalmazNagyító.this.a)
                /MandelbrotHalmazNagyító.this.szélesség;
    double dy = (MandelbrotHalmazNagyító.this.d
                - MandelbrotHalmazNagyító.this.c)
                /MandelbrotHalmazNagyító.this.magasság;

    new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
        MandelbrotHalmazNagyító.this.d-y*dy,
        600,
        MandelbrotHalmazNagyító.this.iterációsHatár);
}
            }]]>
        </programlisting>
        <para>
          A mouseDragged() osztállyal figyeljük, hogy kijelölt területet. Ekkor kapjuk meg a szélességet és a magasságot értékül, amik rendre az mx és az my változókban lesznek eltárolva.  
        </para>
        <programlisting language="java"><![CDATA[
addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
    public void mouseDragged(java.awt.event.MouseEvent m) {
        mx = m.getX() - x;
        my = m.getY() - y;
        repaint();
    }
});
            }]]>
        </programlisting>
        <para>
            Itt is lehet élesíteni a képet, ha nagyítás után homályos lesz. Ehhez a KeyAdaptert() osztályt hívjuk segítségül, ami
            a MandelbrotHalmaz.java programban található. A KeyListener() figyeli a billenytűzetleütéseket.
            Jelen esetben az 's', 'n' és 'm' gombokat figyeli. Ha az a kapott billentyűzet (<function>e.getKeyCode()</function>) egyenlő az 'n' billentyűzettel (<function>KeyEvent.VK_N</function>), akkor újraszámítjuk az adatokat, kivéve, ha már előtte ki volt számítva.
        </para>
        <programlisting language="java"><![CDATA[
...
        addKeyListener(new java.awt.event.KeyAdapter() {
        // Az 's', 'n' és 'm' gombok lenyomását figyeljük 
            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_S)
                    pillanatfelvétel();
                // Az 'n' gomb benyomásával pontosabb számítást végzünk.
                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
                    if(számításFut == false) {
                        MandelbrotHalmaz.this.iterációsHatár += 256;
                        // A számítás újra indul:
                        számításFut = true;
                        new Thread(MandelbrotHalmaz.this).start();
                    }
                } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_M) {
                    if(számításFut == false) {
                        MandelbrotHalmaz.this.iterációsHatár += 10*256;
                        // A számítás újra indul:
                        számításFut = true;
                        new Thread(MandelbrotHalmaz.this).start();
                    }
                }
            }
        });
...
        }]]>
        </programlisting>
    </section>

</chapter>                
